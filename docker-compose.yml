version: "3.8"

services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_PATH=/app/database/crypto_bot.db
      - LOG_LEVEL=info
    env_file:
      - .env
    volumes:
      - ./packages/database:/app/database
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - crypto-bot-network
    depends_on:
      - database

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:3001
    restart: unless-stopped
    networks:
      - crypto-bot-network
    depends_on:
      - backend

  # Database service (SQLite file)
  database:
    image: alpine:latest
    volumes:
      - ./packages/database:/app/database
    command: ["sh", "-c", "echo 'Database volume mounted' && tail -f /dev/null"]
    networks:
      - crypto-bot-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - crypto-bot-network

  # Optional: Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - crypto-bot-network
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  crypto-bot-network:
    driver: bridge
